//express paketini tanÄ±mladik
const express = require("express");
// cors paketini tanÄ±mladik
const cors = require("cors");

//const mongoose = require("mongoose");

//app middlewareini kullanarak express kÃ¼tÃ¼phanesinin tÃ¼m Ã¶zellkiklerinden faydalaniyor olacagaiz.
//app middleware i vasÄ±tasÄ±yla express kÃ¼tÃ¼phanesine eriÅŸim saÄŸladÄ±k.
const app = express();

//// db icin hazirlamis oldugumuz   js dosyasÄ±nÄ± cagÄ±ralÄ±m.SON ASAMA  en son burayÄ± yazdik moongodb yi bagladik .mongoda veritabanÄ±na yemekdata json i girdik. ondan Ã¶nce https://www.convertsimple.com/convert-javascript-to-json/ json Ä± burdan dÃ¶nÃ¼stÃ¼rdÃ¼k json yemekdata olustruduk. sonra  add e basip yemekdata json dosyayolunu bulup sectik sonra json olarak yÃ¼kle dedik. sonra models diye folder olustrduj sonraki asamaya gectik.
const db = require("./db");
const burgerModel = require("./models/BurgerModel");

////middlewareimiz ile cors kÃ¼tÃ¼phanesini kullanmayÄ± ve json req ve res'lerinde hata almanÄ±n Ã¶nÃ¼ne geÃ§tik.
app.use(express.json());
// backend kodlarini geneleyen cors politikasÄ±ndan kurtulmak icin kullandigimiz bir kÃ¼tÃ¼phane
app.use(cors());

//http://localhost:4000/getFoods ile postmanden verileri gÃ¶rdÃ¼k .
/* app.get("/getFoods", async (req, res) => { getFoods kismi local den sonraki / dan sonra gelecek yazi ("/getFoods")istedigini yazabilirsin burada. */
//getFoods servisi
app.get("/getFoods", async (req, res) => {
  try {
    const foods = await burgerModel.find({});
    res.send(foods);
    console.log(foods);
  } catch (err) {
    console.log(err);
  }
});

//package json a "start": "nodemon index.js"  komutunu ekledik node index.js filan yazmak lazÄ±m ama normalde caslÄ±stÄ±rmak scripti olarak yaz otomatik olarak her save de kayÄ±t iÅŸlemi yapÄ±p serveri ayaga kaldigiyÄ±ror.

var port = 4000;
app.listen(4000, () => {
  console.log(
    `Food Order ServerÄ± ${port} portunda baÅŸarÄ±yla ayaÄŸa kalktÄ±. ğŸ”¥ğŸ”¥`
  );
});
